require('dotenv').config()
const express = require("express");
const cors = require("cors");
const app = express();
const { PORT } = require("./src/config");
const router = require("./src/modules");
const fs = require('fs');
const path = require('path')
const QRCode = require('qrcode');
const { v4: uuidv4 } = require('uuid');
const { bot } = require('./src/lib/bot')
const model = require('./model')
const { formatNumber } = require('./src/lib/functions')

const publicFolderPath = path.join(__dirname, 'public');
const imagesFolderPath = path.join(publicFolderPath, 'images');

if (!fs.existsSync(publicFolderPath)) {
   fs.mkdirSync(publicFolderPath);
   console.log('Public folder created successfully.');
} else {
   console.log('Public folder already exists.');
}

if (!fs.existsSync(imagesFolderPath)) {
   fs.mkdirSync(imagesFolderPath);
   console.log('Images folder created successfully.');
} else {
   console.log('Images folder already exists within the public folder.');
}

// START
bot.onText(/\/start/, async msg => {
   const chatId = msg.chat.id
   const content = `<strong>Assalomu alaykum Dery'ga xush kelibsizüòä</strong>\n\n<strong>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deryüòä</strong>`;
   const foundUserByChatId = await model.foundUserByChatId(chatId)

   if (foundUserByChatId) {
      if (foundUserByChatId?.user_lang == 'uz') {
         bot.sendMessage(chatId, `${foundUserByChatId?.user_name}! Birgalikda buyurtma beramizmi? üòÉ`, {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "üõç Buyurtma berish"
                     }
                  ],
                  [
                     {
                        text: "‚úçÔ∏è Fikr bildirish"
                     },
                     {
                        text: "üí∏ Jamg'arma"
                     }
                  ],
                  [
                     {
                        text: "‚ÑπÔ∏è Ma ºlumot"
                     },
                     {
                        text: "‚öôÔ∏è Sozlamalar"
                     }
                  ],
                  [
                     {
                        text: "üë• Yaqinlarim"
                     }
                  ]
               ],
               resize_keyboard: true
            })
         })
      } else if (foundUserByChatId?.user_lang == 'ru') {
         bot.sendMessage(chatId, `${foundUserByChatId?.user_name}! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ`, {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "üõç –ó–∞–∫–∞–∑–∞—Ç—å"
                     }
                  ],
                  [
                     {
                        text: "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
                     },
                     {
                        text: "üí∏ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å"
                     }
                  ],
                  [
                     {
                        text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                     },
                     {
                        text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                     }
                  ],
                  [
                     {
                        text: "üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ"
                     }
                  ]
               ],
               resize_keyboard: true
            })
         })
      }
   } else {
      bot.sendMessage(chatId, content, {
         parse_mode: "HTML",
         reply_markup: {
            inline_keyboard: [
               [
                  {
                     text: "Uzbek üá∫üáø",
                     callback_data: "uz",
                  },
                  {
                     text: "–†—É—Å—Å–∫–∏–π üá∑üá∫",
                     callback_data: "ru",
                  },
               ]
            ]
         }
      })
   }

})

// REGISTER
bot.on('callback_query', async msg => {
   const lang = msg.data
   const chatId = msg.message.chat.id
   const foundUserByChatId = await model.foundUserByChatId(chatId)
   let requestName;
   let requestGender;
   let requestContact;

   if (lang == 'uz') {
      if (foundUserByChatId) {
         const editUserLang = await model.editUserLang(foundUserByChatId?.user_id, lang)

         if (editUserLang) {
            bot.sendMessage(chatId, `${foundUserByChatId?.user_name}! Birgalikda buyurtma beramizmi? üòÉ`, {
               reply_markup: JSON.stringify({
                  keyboard: [
                     [
                        {
                           text: "üõç Buyurtma berish"
                        }
                     ],
                     [
                        {
                           text: "‚úçÔ∏è Fikr bildirish"
                        },
                        {
                           text: "üí∏ Jamg'arma"
                        }
                     ],
                     [
                        {
                           text: "‚ÑπÔ∏è Ma ºlumot"
                        },
                        {
                           text: "‚öôÔ∏è Sozlamalar"
                        }
                     ],
                     [
                        {
                           text: "üë• Yaqinlarim"
                        }
                     ]
                  ],
                  resize_keyboard: true
               })
            })
         }

      } else {
         bot.sendMessage(chatId, 'Ismingizni yozing', {
            reply_markup: {
               force_reply: true
            }
         }).then(payload => {
            const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, msg => {
               bot.removeListener(replyListenerId)

               if (msg.text) {
                  requestName = msg.text

                  bot.sendMessage(msg.chat.id, `${requestName}, jinsni tanlang`, {
                     reply_markup: JSON.stringify({
                        keyboard:
                           [
                              [
                                 {
                                    text: 'Erkak',
                                    force_reply: true
                                 },
                                 {
                                    text: 'Ayol',
                                    force_reply: true
                                 }
                              ]
                           ],
                        resize_keyboard: true
                     })
                  }).then(payload => {
                     const replyListenerId = bot.on("message", msg => {
                        bot.removeListener(replyListenerId)

                        if (msg.text) {
                           requestGender = msg.text

                           bot.sendMessage(msg.chat.id, `${requestName}, Kontaktingizni yuboring`, {
                              reply_markup: JSON.stringify({
                                 keyboard:
                                    [
                                       [
                                          {
                                             text: 'Kontaktni yuborish',
                                             request_contact: true,
                                             one_time_keyboard: true
                                          }
                                       ]
                                    ],
                                 resize_keyboard: true
                              })
                           }).then(payload => {
                              const replyListenerId = bot.on("contact", async (msg) => {
                                 bot.removeListener(replyListenerId)

                                 if (msg.contact) {
                                    requestContact = msg.contact.phone_number;
                                    const personal_code = uuidv4();
                                    const referral_code = uuidv4();

                                    if (requestName && requestGender && requestContact) {

                                       QRCode.toFile(`./public/images/qrcode_personal_${chatId}.png`, personal_code, {}, async (err) => {
                                          if (err) throw err;
                                       })

                                       QRCode.toFile(`./public/images/qrcode_referral_${chatId}.png`, referral_code, {}, async (err) => {
                                          if (err) throw err;
                                       })


                                       const registerUser = await model.registerUser(
                                          requestName,
                                          requestGender,
                                          `+${requestContact}`,
                                          chatId,
                                          personal_code,
                                          referral_code,
                                          `${process.env.BACKEND_URL}/qrcode_personal_${chatId}.png`,
                                          `qrcode_personal_${chatId}.png`,
                                          `${process.env.BACKEND_URL}/qrcode_referral_${chatId}.png`,
                                          `qrcode_referral_${chatId}.png`,
                                          lang
                                       )

                                       if (registerUser) {
                                          bot.sendMessage(chatId, `${requestName}, muvaffaqiyatli ro'yxatdan o'tdingiz.`, {
                                             reply_markup: JSON.stringify({
                                                keyboard: [
                                                   [
                                                      {
                                                         text: "üõç Buyurtma berish"
                                                      }
                                                   ],
                                                   [
                                                      {
                                                         text: "‚úçÔ∏è Fikr bildirish"
                                                      },
                                                      {
                                                         text: "üí∏ Jamg'arma"
                                                      }
                                                   ],
                                                   [
                                                      {
                                                         text: "‚ÑπÔ∏è Ma ºlumot"
                                                      },
                                                      {
                                                         text: "‚öôÔ∏è Sozlamalar"
                                                      }
                                                   ],
                                                   [
                                                      {
                                                         text: "üë• Yaqinlarim"
                                                      }
                                                   ]
                                                ],
                                                resize_keyboard: true
                                             })
                                          })
                                       }
                                    }
                                 }
                              })
                           })
                        }
                     })
                  })
               }
            })
         })
      }
   } else if (lang == 'ru') {
      if (foundUserByChatId) {
         const editUserLang = await model.editUserLang(foundUserByChatId?.user_id, lang)

         if (editUserLang) {
            bot.sendMessage(chatId, `${foundUserByChatId?.user_name}! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ`, {
               reply_markup: JSON.stringify({
                  keyboard: [
                     [
                        {
                           text: "üõç –ó–∞–∫–∞–∑–∞—Ç—å"
                        }
                     ],
                     [
                        {
                           text: "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
                        },
                        {
                           text: "üí∏ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å"
                        }
                     ],
                     [
                        {
                           text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                        },
                        {
                           text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                        }
                     ],
                     [
                        {
                           text: "üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ"
                        }
                     ]
                  ],
                  resize_keyboard: true
               })
            })
         }
      } else {
         bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è', {
            reply_markup: {
               force_reply: true
            }
         }).then(payload => {
            const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, msg => {
               bot.removeListener(replyListenerId)

               if (msg.text) {
                  requestName = msg.text

                  bot.sendMessage(msg.chat.id, `${requestName}, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª`, {
                     reply_markup: JSON.stringify({
                        keyboard:
                           [
                              [
                                 {
                                    text: '–ú—É–∂—Å–∫–æ–π',
                                    force_reply: true
                                 },
                                 {
                                    text: '–î–µ–≤—É—à–∫–∞',
                                    force_reply: true
                                 }
                              ]
                           ],
                        resize_keyboard: true
                     })
                  }).then(payload => {
                     const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, msg => {
                        bot.removeListener(replyListenerId)

                        if (msg.text) {
                           requestGender = msg.text

                           bot.sendMessage(msg.chat.id, `${requestName}, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç`, {
                              reply_markup: JSON.stringify({
                                 keyboard:
                                    [
                                       [
                                          {
                                             text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                                             request_contact: true,
                                             one_time_keyboard: true
                                          }
                                       ]
                                    ],
                                 resize_keyboard: true
                              })
                           }).then(payload => {
                              const replyListenerId = bot.on("contact", async (msg) => {
                                 bot.removeListener(replyListenerId)

                                 if (msg.contact) {
                                    requestContact = msg.contact.phone_number;
                                    const personal_code = uuidv4();
                                    const referral_code = uuidv4();

                                    if (requestName && requestGender && requestContact) {

                                       QRCode.toFile(`./public/images/qrcode_personal_${chatId}.png`, personal_code, {}, async (err) => {
                                          if (err) throw err;
                                       })

                                       QRCode.toFile(`./public/images/qrcode_referral_${chatId}.png`, referral_code, {}, async (err) => {
                                          if (err) throw err;
                                       })


                                       const registerUser = await model.registerUser(
                                          requestName,
                                          requestGender,
                                          `+${requestContact}`,
                                          chatId,
                                          personal_code,
                                          `${process.env.BACKEND_URL}/qrcode_personal_${chatId}.png`,
                                          `qrcode_personal_${chatId}.png`,
                                          `${process.env.BACKEND_URL}/qrcode_referral_${chatId}.png`,
                                          `qrcode_referral_${chatId}.png`,
                                          lang
                                       )

                                       if (registerUser) {
                                          bot.sendMessage(chatId, `${requestName}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.`, {
                                             reply_markup: JSON.stringify({
                                                keyboard: [
                                                   [
                                                      {
                                                         text: "üõç –ó–∞–∫–∞–∑–∞—Ç—å"
                                                      }
                                                   ],
                                                   [
                                                      {
                                                         text: "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
                                                      },
                                                      {
                                                         text: "üí∏ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å"
                                                      }
                                                   ],
                                                   [
                                                      {
                                                         text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                                                      },
                                                      {
                                                         text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                                                      }
                                                   ],
                                                   [
                                                      {
                                                         text: "üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ"
                                                      }
                                                   ]
                                                ],
                                                resize_keyboard: true
                                             })
                                          })
                                       }

                                    }
                                 }
                              })
                           })
                        }
                     })
                  })
               }
            })
         })
      }
   }
})

// CASHBEK
bot.on('message', async msg => {
   const chatId = msg.chat.id
   const text = msg.text
   const foundUserByChatId = await model.foundUserByChatId(chatId)

   if (text == "üí∏ Jamg'arma") {
      const total = formatNumber(foundUserByChatId?.user_cashbek)

      if (foundUserByChatId) {
         bot.sendMessage(chatId, `Hisobingiz: ${total} sum`, {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "üÜî QR-kod"
                     }
                  ],
                  [
                     {
                        text: "üßë‚Äçü§ù‚Äçüßë Do'stlarga yuborish"
                     }
                  ],
                  [
                     {
                        text: "‚¨ÖÔ∏è Ortga"
                     }
                  ],
               ],
               resize_keyboard: true
            })
         })
      }
   } else if (text == 'üÜî QR-kod' || text == 'üÜî –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥') {
      bot.sendPhoto(chatId, `./public/images/${foundUserByChatId?.user_personal_code_image_name}`)
   } else if (text == "üßë‚Äçü§ù‚Äçüßë Do'stlarga yuborish" || text == 'üßë‚Äçü§ù‚Äçüßë –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º') {
      bot.sendPhoto(chatId, `./public/images/${foundUserByChatId?.user_referral_bonus_image_name}`)
   } else if (text == 'üí∏ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å') {
      const total = formatNumber(foundUserByChatId?.user_cashbek)

      if (foundUserByChatId) {
         bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç—É: ${total} —Å—É–º`, {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "üÜî –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥"
                     }
                  ],
                  [
                     {
                        text: "üßë‚Äçü§ù‚Äçüßë –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º"
                     }
                  ],
                  [
                     {
                        text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                     }
                  ],
               ],
               resize_keyboard: true
            })
         })
      }
   }

})

// SETTINGS
bot.on('message', async msg => {
   const chatId = msg.chat.id
   const text = msg.text
   const foundUserByChatId = await model.foundUserByChatId(chatId)

   if (text == '‚öôÔ∏è Sozlamalar') {
      bot.sendMessage(chatId, '‚öôÔ∏è Sozlamalar', {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "Ismni o'zgartirish"
                  },
                  {
                     text: "Raqamni o'zgartirish"
                  },
               ],
               [
                  {
                     text: "Tilni tanlang"
                  }
               ],
               [
                  {
                     text: "‚¨ÖÔ∏è Ortga"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == "Ismni o'zgartirish") {
      if (foundUserByChatId) {
         bot.sendMessage(chatId, 'Ismingizni yozing', {
            reply_markup: {
               force_reply: true
            }
         }).then(payload => {
            const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async msg => {
               bot.removeListener(replyListenerId)
               if (msg.text) {
                  const editUserName = await model.editUserName(foundUserByChatId?.user_id, msg?.text)

                  if (editUserName) {
                     bot.sendMessage(chatId, '‚öôÔ∏è Sozlamalar', {
                        reply_markup: JSON.stringify({
                           keyboard: [
                              [
                                 {
                                    text: "Ismni o'zgartirish"
                                 },
                                 {
                                    text: "Raqamni o'zgartirish"
                                 },
                              ],
                              [
                                 {
                                    text: "Tilni tanlang"
                                 }
                              ],
                              [
                                 {
                                    text: "‚¨ÖÔ∏è Ortga"
                                 }
                              ]
                           ],
                           resize_keyboard: true
                        })
                     })
                  }
               }
            })
         })
      }
   } else if (text == "Raqamni o'zgartirish") {
      bot.sendMessage(chatId, 'üì± Raqamni +998********* shaklda yuboring.', {
         reply_markup: {
            force_reply: true
         }
      }).then(payload => {
         const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async msg => {
            bot.removeListener(replyListenerId)
            if (msg.text) {
               const editUserContact = await model.editUserContact(foundUserByChatId?.user_id, msg?.text)

               if (editUserContact) {
                  bot.sendMessage(chatId, '‚öôÔ∏è Sozlamalar', {
                     reply_markup: JSON.stringify({
                        keyboard: [
                           [
                              {
                                 text: "Ismni o'zgartirish"
                              },
                              {
                                 text: "Raqamni o'zgartirish"
                              },
                           ],
                           [
                              {
                                 text: "Tilni tanlang"
                              }
                           ],
                           [
                              {
                                 text: "‚¨ÖÔ∏è Ortga"
                              }
                           ]
                        ],
                        resize_keyboard: true
                     })
                  })
               }
            }
         })
      })
   } else if (text == "Tilni tanlang") {
      bot.sendMessage(chatId, 'Tilni tanlang', {
         reply_markup: {
            inline_keyboard: [
               [
                  {
                     text: "Uzbek üá∫üáø",
                     callback_data: "uz",
                  },
                  {
                     text: "–†—É—Å—Å–∫–∏–π üá∑üá∫",
                     callback_data: "ru",
                  },
               ]
            ]
         }
      })
   } else if (text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
      bot.sendMessage(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"
                  },
                  {
                     text: "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"
                  },
               ],
               [
                  {
                     text: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
                  }
               ],
               [
                  {
                     text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == '–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û') {
      if (foundUserByChatId) {
         bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è', {
            reply_markup: {
               force_reply: true
            }
         }).then(payload => {
            const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async msg => {
               bot.removeListener(replyListenerId)
               if (msg.text) {
                  const editUserName = await model.editUserName(foundUserByChatId?.user_id, msg?.text)

                  if (editUserName) {
                     bot.sendMessage(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
                        reply_markup: JSON.stringify({
                           keyboard: [
                              [
                                 {
                                    text: "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"
                                 },
                                 {
                                    text: "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"
                                 },
                              ],
                              [
                                 {
                                    text: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
                                 }
                              ],
                              [
                                 {
                                    text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                                 }
                              ]
                           ],
                           resize_keyboard: true
                        })
                     })
                  }
               }
            })
         })
      }
   } else if (text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä") {
      bot.sendMessage(chatId, 'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998*********', {
         reply_markup: {
            force_reply: true
         }
      }).then(payload => {
         const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async msg => {
            bot.removeListener(replyListenerId)
            if (msg.text) {
               const editUserContact = await model.editUserContact(foundUserByChatId?.user_id, msg?.text)

               if (editUserContact) {
                  bot.sendMessage(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
                     reply_markup: JSON.stringify({
                        keyboard: [
                           [
                              {
                                 text: "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"
                              },
                              {
                                 text: "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"
                              },
                           ],
                           [
                              {
                                 text: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
                              }
                           ],
                           [
                              {
                                 text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                              }
                           ]
                        ],
                        resize_keyboard: true
                     })
                  })
               }
            }
         })
      })
   } else if (text == '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫') {
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', {
         reply_markup: {
            inline_keyboard: [
               [
                  {
                     text: "Uzbek üá∫üáø",
                     callback_data: "uz",
                  },
                  {
                     text: "–†—É—Å—Å–∫–∏–π üá∑üá∫",
                     callback_data: "ru",
                  },
               ]
            ]
         }
      })
   }
})

// BACK
bot.on('message', async msg => {
   const chatId = msg.chat.id
   const text = msg.text

   if (text == "‚¨ÖÔ∏è Ortga") {
      const foundUserByChatId = await model.foundUserByChatId(chatId)

      bot.sendMessage(chatId, `${foundUserByChatId?.user_name}! Birgalikda buyurtma beramizmi? üòÉ`, {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "üõç Buyurtma berish"
                  }
               ],
               [
                  {
                     text: "‚úçÔ∏è Fikr bildirish"
                  },
                  {
                     text: "üí∏ Jamg'arma"
                  }
               ],
               [
                  {
                     text: "‚ÑπÔ∏è Ma ºlumot"
                  },
                  {
                     text: "‚öôÔ∏è Sozlamalar"
                  }
               ],
               [
                  {
                     text: "üë• Yaqinlarim"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
      const foundUserByChatId = await model.foundUserByChatId(chatId)

      bot.sendMessage(chatId, `${foundUserByChatId?.user_name}! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ`, {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "üõç –ó–∞–∫–∞–∑–∞—Ç—å"
                  }
               ],
               [
                  {
                     text: "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
                  },
                  {
                     text: "üí∏ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å"
                  }
               ],
               [
                  {
                     text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                  },
                  {
                     text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                  }
               ],
               [
                  {
                     text: "üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   }
})

// Information
bot.on('message', async msg => {
   const chatId = msg.chat.id
   const text = msg.text

   if (text == "‚ÑπÔ∏è Ma ºlumot") {
      bot.sendMessage(chatId, `‚ÑπÔ∏è Ma ºlumot`, {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "Bizning manzil üìç"
                  },
                  {
                     text: "‚òéÔ∏è Biz bilan aloqa"
                  }
               ],
               [
                  {
                     text: "Ijtimoiy tarmoqlar"
                  }
               ],
               [
                  {
                     text: "‚¨ÖÔ∏è Ortga"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == "Bizning manzil üìç") {
      const latitude = 41.330722;
      const longitude = 69.304972;

      bot.sendLocation(chatId, latitude, longitude)
   } else if (text == "‚òéÔ∏è Biz bilan aloqa") {
      bot.sendMessage(chatId, `+998 97 574 33 33`)
   } else if (text == 'Ijtimoiy tarmoqlar') {
      bot.sendMessage(chatId, 'Ijtimoiy tarmoqlar', {
         reply_markup: {
            inline_keyboard: [
               [
                  {
                     text: "Instagram",
                     callback_data: "instagram",
                     url: "https://www.instagram.com/dery_confectionery/"
                  },
               ],
               [
                  {
                     text: "Telegram",
                     callback_data: "telegram",
                     url: "https://t.me/deryhouse"
                  },
               ],
               [
                  {
                     text: "Facebook",
                     callback_data: "facebook",
                     url: "https://www.facebook.com/people/Dery-Confectionery/pfbid0GCoXoNojMRo7HiZvcMSaLsRfukfD6r2fD3og56yfHXGknCeBVgbcFqMzucti1dcrl/"
                  },
               ]
            ]
         }
      })
   } else if (text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
      bot.sendMessage(chatId, `‚ÑπÔ∏è Ma ºlumot`, {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "–ù–∞—à –∞–¥—Ä–µ—Å üìç"
                  },
                  {
                     text: "‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
                  }
               ],
               [
                  {
                     text: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞"
                  }
               ],
               [
                  {
                     text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == "–ù–∞—à –∞–¥—Ä–µ—Å üìç") {
      const latitude = 41.330722;
      const longitude = 69.304972;

      bot.sendLocation(chatId, latitude, longitude)
   } else if (text == "‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏") {
      bot.sendMessage(chatId, `+998 97 574 33 33`)
   } else if (text == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞") {
      bot.sendMessage(chatId, '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞', {
         reply_markup: {
            inline_keyboard: [
               [
                  {
                     text: "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º",
                     callback_data: "instagram",
                     url: "https://www.instagram.com/dery_confectionery/"
                  },
               ],
               [
                  {
                     text: "–¢–µ–ª–µ–≥—Ä–∞–º–º–∞",
                     callback_data: "telegram",
                     url: "https://t.me/deryhouse"
                  },
               ],
               [
                  {
                     text: "–§–µ–π—Å–±—É–∫",
                     callback_data: "facebook",
                     url: "https://www.facebook.com/people/Dery-Confectionery/pfbid0GCoXoNojMRo7HiZvcMSaLsRfukfD6r2fD3og56yfHXGknCeBVgbcFqMzucti1dcrl/"
                  },
               ]
            ]
         }
      })
   }
})

// REVIEW
bot.on("message", async msg => {
   const chatId = msg.chat.id
   const text = msg.text
   const foundUserByChatId = await model.foundUserByChatId(chatId)

   if (text == '‚úçÔ∏è Fikr bildirish') {
      if (foundUserByChatId) {
         bot.sendMessage(chatId, 'Sizning fikringiz biz uchun muhim. Iltimos, fikr-mulohazalaringizni qoldiring.', {
            reply_markup: {
               force_reply: true
            }
         }).then(payload => {
            const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async msg => {
               bot.removeListener(replyListenerId)

               if (msg.text) {
                  const addReview = await model.addReview(foundUserByChatId?.user_id, msg.text)

                  if (addReview) {
                     bot.sendMessage(chatId, `${foundUserByChatId?.user_name}, fikringiz uchun rahmatüòä`, {
                        reply_markup: JSON.stringify({
                           keyboard: [
                              [
                                 {
                                    text: "üõç Buyurtma berish"
                                 }
                              ],
                              [
                                 {
                                    text: "‚úçÔ∏è Fikr bildirish"
                                 },
                                 {
                                    text: "üí∏ Jamg'arma"
                                 }
                              ],
                              [
                                 {
                                    text: "‚ÑπÔ∏è Ma ºlumot"
                                 },
                                 {
                                    text: "‚öôÔ∏è Sozlamalar"
                                 }
                              ],
                              [
                                 {
                                    text: "üë• Yaqinlarim"
                                 }
                              ]
                           ],
                           resize_keyboard: true
                        })
                     })
                  }
               }
            })
         })
      }
   } else if (text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤") {
      if (foundUserByChatId) {
         bot.sendMessage(chatId, '–ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤.', {
            reply_markup: {
               force_reply: true
            }
         }).then(payload => {
            const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async msg => {
               bot.removeListener(replyListenerId)

               if (msg.text) {
                  const addReview = await model.addReview(foundUserByChatId?.user_id, msg.text)

                  if (addReview) {
                     bot.sendMessage(chatId, `${foundUserByChatId?.user_name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ`, {
                        reply_markup: JSON.stringify({
                           keyboard: [
                              [
                                 {
                                    text: "üõç –ó–∞–∫–∞–∑–∞—Ç—å"
                                 }
                              ],
                              [
                                 {
                                    text: "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
                                 },
                                 {
                                    text: "üí∏ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å"
                                 }
                              ],
                              [
                                 {
                                    text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                                 },
                                 {
                                    text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                                 }
                              ],
                              [
                                 {
                                    text: "üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ"
                                 }
                              ]
                           ],
                           resize_keyboard: true
                        })
                     })
                  }
               }
            })
         })
      }
   }
})

// USER RELATIONSHIP
bot.on("message", async msg => {
   const chatId = msg.chat.id
   const text = msg.text

   if (text == "üë• Yaqinlarim") {
      bot.sendMessage(chatId, 'üë• Yaqinlarim', {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "üë• Ro'yxat"
                  }
               ],
               [
                  {
                     text: "‚ûï Qo'shish"
                  }
               ],
               [
                  {
                     text: "‚¨ÖÔ∏è Ortga"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == "üë• Ro'yxat") {
      const foundUserByChatId = await model.foundUserByChatId(chatId)
      const foundUserRelationship = await model.foundUserRelationship(foundUserByChatId?.user_id)

      if (foundUserRelationship?.length > 0) {
         const relationshipList = foundUserRelationship.map((person, index) => `${index + 1}. ${person.relationship_name} - ${person.relationship_birthday} tu'gilgan kuni.`).join("\n");

         bot.sendMessage(chatId, relationshipList, {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "‚¨ÖÔ∏è Ortga"
                     }
                  ]
               ],
               resize_keyboard: true
            })
         })
      } else {
         bot.sendMessage(chatId, "Topilmadiüòï", {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "‚¨ÖÔ∏è Ortga"
                     }
                  ]
               ],
               resize_keyboard: true
            })
         })
      }
   } else if (text == "‚ûï Qo'shish") {
      let requestName
      let requestBirthday

      bot.sendMessage(chatId, "Ismini yozing", {
         reply_markup: {
            force_reply: true
         }
      }).then(payload => {
         const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, msg => {
            bot.removeListener(replyListenerId)

            if (msg.text) {
               requestName = msg.text

               bot.sendMessage(msg.chat.id, "Tug'ilgan kunini yozing, ss.oo", {
                  reply_markup: {
                     force_reply: true
                  }
               }).then(payload => {
                  const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async (msg) => {
                     bot.removeListener(replyListenerId)


                     if (msg.text) {
                        requestBirthday = msg.text

                        if (requestName && requestBirthday) {
                           const foundUserByChatId = await model.foundUserByChatId(chatId)
                           const addUserRelationship = await model.addUserRelationship(
                              requestName,
                              requestBirthday,
                              foundUserByChatId?.user_id
                           )

                           if (addUserRelationship) {
                              bot.sendMessage(chatId, "Muvaffaqiyatli qo'shildi", {
                                 reply_markup: JSON.stringify({
                                    keyboard: [
                                       [
                                          {
                                             text: "üë• Ro'yxat"
                                          }
                                       ],
                                       [
                                          {
                                             text: "‚ûï Qo'shish"
                                          }
                                       ],
                                       [
                                          {
                                             text: "‚¨ÖÔ∏è Ortga"
                                          }
                                       ]
                                    ],
                                    resize_keyboard: true
                                 })
                              })
                           }
                        }
                     }
                  })
               })
            }

         })
      })
   } else if (text == "üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ") {
      bot.sendMessage(chatId, 'üë• –ú–æ–∏ –±–ª–∏–∑–∫–∏–µ', {
         reply_markup: JSON.stringify({
            keyboard: [
               [
                  {
                     text: "üë• –°–ø–∏—Å–æ–∫"
                  }
               ],
               [
                  {
                     text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
                  }
               ],
               [
                  {
                     text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                  }
               ]
            ],
            resize_keyboard: true
         })
      })
   } else if (text == "üë• –°–ø–∏—Å–æ–∫") {
      const foundUserByChatId = await model.foundUserByChatId(chatId)
      const foundUserRelationship = await model.foundUserRelationship(foundUserByChatId?.user_id)

      if (foundUserRelationship?.length > 0) {
         const relationshipList = foundUserRelationship.map((person, index) => `${index + 1}. ${person.relationship_name} - ${person.relationship_birthday} –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.`).join("\n");

         bot.sendMessage(chatId, relationshipList, {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                     }
                  ]
               ],
               resize_keyboard: true
            })
         })
      } else {
         bot.sendMessage(chatId, "–ù–µ –Ω–∞–π–¥–µ–Ω–æüòï", {
            reply_markup: JSON.stringify({
               keyboard: [
                  [
                     {
                        text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                     }
                  ]
               ],
               resize_keyboard: true
            })
         })
      }
   } else if (text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å") {
      let requestName
      let requestBirthday

      bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è", {
         reply_markup: {
            force_reply: true
         }
      }).then(payload => {
         const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, msg => {
            bot.removeListener(replyListenerId)

            if (msg.text) {
               requestName = msg.text

               bot.sendMessage(msg.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–¥.–º–º", {
                  reply_markup: {
                     force_reply: true
                  }
               }).then(payload => {
                  const replyListenerId = bot.onReplyToMessage(payload.chat.id, payload.message_id, async (msg) => {
                     bot.removeListener(replyListenerId)

                     if (msg.text) {
                        requestBirthday = msg.text

                        if (requestName && requestBirthday) {
                           const foundUserByChatId = await model.foundUserByChatId(chatId)
                           const addUserRelationship = await model.addUserRelationship(
                              requestName,
                              requestBirthday,
                              foundUserByChatId?.user_id
                           )

                           if (addUserRelationship) {
                              bot.sendMessage(chatId, "–î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", {
                                 reply_markup: JSON.stringify({
                                    keyboard: [
                                       [
                                          {
                                             text: "üë• –°–ø–∏—Å–æ–∫"
                                          }
                                       ],
                                       [
                                          {
                                             text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
                                          }
                                       ],
                                       [
                                          {
                                             text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                                          }
                                       ]
                                    ],
                                    resize_keyboard: true
                                 })
                              })
                           }
                        }
                     }
                  })
               })
            }

         })
      })
   }
})

app.use(cors({ origin: "*" }))
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/public', express.static(path.resolve(__dirname, 'public')))
app.use("/api/v1", router);

app.listen(PORT, console.log(PORT));